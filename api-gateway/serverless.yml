service: api-gateway

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: "resources-${self:provider.stage}"
  domains:
    prod: gateway.sandaemc.com
    dev: dev-gateway.sandaemc.com

  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ""
    stage: ${self:custom.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ResourcesDynamoDBTable", "Arn"] }
  environment:
    RESOURCES_TABLE: ${self:custom.tableName}

resources:
  Resources:
    ResourcesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"
  getResources:
    handler: index.handler
    events:
      - http: GET /resources
  createResource:
    handler: index.handler
    events:
      - http: POST /resources
  getResource:
    handler: index.handler
    events:
      - http: GET /resources/:name
  updateResource:
    handler: index.handler
    events:
      - http: PATCH /resources/:name

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline
