service: shopping-api
app: shopping-api

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

functions:
  listSellers:
    handler: handlers/seller.index
    events:
      - http: 'GET /sellers'
  createSeller:
    handler: handlers/seller.create
    events:
      - http: 'POST /sellers'
  viewSeller:
    handler: handlers/seller.view
    events:
      - http: 'GET /sellers/{sellerId}'
  updateSeller:
    handler: handlers/seller.update
    events:
      - http: 'PATCH /sellers/{sellerId}'
  deleteSeller:
    handler: handlers/seller.remove
    events:
      - http: 'DELETE /sellers/{sellerId}'

  listProducts:
    handler: handlers/product.index
    events:
      - http: 'GET /sellers/{sellerId}/products'
  createProduct:
    handler: handlers/product.create
    events:
      - http: 'POST /sellers/{sellerId}/products'
  updateProduct:
    handler: handlers/product.update
    events:
      - http: 'PATCH /sellers/{sellerId}/products/{productId}'
  viewProduct:
    handler: handlers/product.view
    events:
      - http: 'GET /sellers/{sellerId}/products/{productId}'
  deleteProduct:
    handler: handlers/product.remove
    events:
      - http: 'DELETE /sellers/{sellerId}/products/{productId}'

  createCart:
    handler: handlers/cart.create
    events:
      - http: 'POST /carts'
  viewCart:
    handler: handlers/cart.view
    events:
      - http: 'GET /carts/{cartId}'
  addItemToCart:
    handler: handlers/cart.addItem
    events:
      - http: 'POST /carts/{cartId}/add-item'

resources:
  Resources:
    ShoppingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  dynamodb:
    stages:
      - dev
